// Code generated from Expression.g4 by ANTLR 4.12.0. DO NOT EDIT.

package expression

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ExpressionLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var expressionlexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func expressionlexerLexerInit() {
	staticData := &expressionlexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'&&'", "'||'", "','", "'.'", "'['", "']'", "'('", "')'", "'=='",
		"'!='",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "DOT", "LBRACK", "RBRACK", "LPAREN", "RPAREN", "EQUAL",
		"NOTEQUAL", "WhiteSpaces", "Identifier", "IntegerLiteral", "FloatingPointLiteral",
		"BooleanLiteral", "StringLiteral",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "DOT", "LBRACK", "RBRACK", "LPAREN", "RPAREN",
		"EQUAL", "NOTEQUAL", "WhiteSpaces", "Identifier", "IntegerLiteral",
		"FloatingPointLiteral", "BooleanLiteral", "StringLiteral", "StringCharacters",
		"StringCharacter", "DecimalIntegerLiteral", "HexIntegerLiteral", "OctalIntegerLiteral",
		"BinaryIntegerLiteral", "IntegerTypeSuffix", "DecimalNumeral", "Digits",
		"Digit", "NonZeroDigit", "DigitsAndUnderscores", "DigitOrUnderscore",
		"Underscores", "HexNumeral", "HexDigits", "HexDigit", "HexDigitsAndUnderscores",
		"HexDigitOrUnderscore", "OctalNumeral", "OctalDigits", "OctalDigit",
		"OctalDigitsAndUnderscores", "OctalDigitOrUnderscore", "BinaryNumeral",
		"BinaryDigits", "BinaryDigit", "BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore",
		"DecimalFloatingPointLiteral", "ExponentPart", "ExponentIndicator",
		"SignedInteger", "Sign", "FloatTypeSuffix", "HexadecimalFloatingPointLiteral",
		"HexSignificand", "BinaryExponent", "BinaryExponentIndicator",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 16, 384, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1,
		1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1,
		7, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 10, 4, 10, 137, 8, 10, 11, 10,
		12, 10, 138, 1, 10, 1, 10, 1, 11, 4, 11, 144, 8, 11, 11, 11, 12, 11, 145,
		1, 11, 5, 11, 149, 8, 11, 10, 11, 12, 11, 152, 9, 11, 1, 12, 1, 12, 1,
		12, 1, 12, 3, 12, 158, 8, 12, 1, 13, 1, 13, 3, 13, 162, 8, 13, 1, 14, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 173, 8, 14,
		1, 15, 1, 15, 3, 15, 177, 8, 15, 1, 15, 1, 15, 1, 15, 3, 15, 182, 8, 15,
		1, 15, 3, 15, 185, 8, 15, 1, 16, 4, 16, 188, 8, 16, 11, 16, 12, 16, 189,
		1, 17, 1, 17, 1, 18, 1, 18, 3, 18, 196, 8, 18, 1, 19, 1, 19, 3, 19, 200,
		8, 19, 1, 20, 1, 20, 3, 20, 204, 8, 20, 1, 21, 1, 21, 3, 21, 208, 8, 21,
		1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 3, 23, 215, 8, 23, 1, 23, 1, 23, 1,
		23, 3, 23, 220, 8, 23, 3, 23, 222, 8, 23, 1, 24, 1, 24, 3, 24, 226, 8,
		24, 1, 24, 3, 24, 229, 8, 24, 1, 25, 1, 25, 3, 25, 233, 8, 25, 1, 26, 1,
		26, 1, 27, 4, 27, 238, 8, 27, 11, 27, 12, 27, 239, 1, 28, 1, 28, 3, 28,
		244, 8, 28, 1, 29, 4, 29, 247, 8, 29, 11, 29, 12, 29, 248, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 31, 1, 31, 3, 31, 257, 8, 31, 1, 31, 3, 31, 260, 8, 31,
		1, 32, 1, 32, 1, 33, 4, 33, 265, 8, 33, 11, 33, 12, 33, 266, 1, 34, 1,
		34, 3, 34, 271, 8, 34, 1, 35, 1, 35, 3, 35, 275, 8, 35, 1, 35, 1, 35, 1,
		36, 1, 36, 3, 36, 281, 8, 36, 1, 36, 3, 36, 284, 8, 36, 1, 37, 1, 37, 1,
		38, 4, 38, 289, 8, 38, 11, 38, 12, 38, 290, 1, 39, 1, 39, 3, 39, 295, 8,
		39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 3, 41, 303, 8, 41, 1, 41,
		3, 41, 306, 8, 41, 1, 42, 1, 42, 1, 43, 4, 43, 311, 8, 43, 11, 43, 12,
		43, 312, 1, 44, 1, 44, 3, 44, 317, 8, 44, 1, 45, 1, 45, 1, 45, 3, 45, 322,
		8, 45, 1, 45, 3, 45, 325, 8, 45, 1, 45, 3, 45, 328, 8, 45, 1, 45, 1, 45,
		1, 45, 3, 45, 333, 8, 45, 1, 45, 3, 45, 336, 8, 45, 1, 45, 1, 45, 1, 45,
		3, 45, 341, 8, 45, 1, 45, 1, 45, 1, 45, 3, 45, 346, 8, 45, 1, 46, 1, 46,
		1, 46, 1, 47, 1, 47, 1, 48, 3, 48, 354, 8, 48, 1, 48, 1, 48, 1, 49, 1,
		49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 3, 51, 365, 8, 51, 1, 52, 1, 52,
		3, 52, 369, 8, 52, 1, 52, 1, 52, 1, 52, 3, 52, 374, 8, 52, 1, 52, 1, 52,
		3, 52, 378, 8, 52, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 0, 0, 55, 1, 1, 3,
		2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12,
		25, 13, 27, 14, 29, 15, 31, 16, 33, 0, 35, 0, 37, 0, 39, 0, 41, 0, 43,
		0, 45, 0, 47, 0, 49, 0, 51, 0, 53, 0, 55, 0, 57, 0, 59, 0, 61, 0, 63, 0,
		65, 0, 67, 0, 69, 0, 71, 0, 73, 0, 75, 0, 77, 0, 79, 0, 81, 0, 83, 0, 85,
		0, 87, 0, 89, 0, 91, 0, 93, 0, 95, 0, 97, 0, 99, 0, 101, 0, 103, 0, 105,
		0, 107, 0, 109, 0, 1, 0, 15, 4, 0, 9, 9, 11, 12, 32, 32, 160, 160, 4, 0,
		36, 36, 65, 90, 95, 95, 97, 122, 5, 0, 36, 36, 48, 57, 65, 90, 95, 95,
		97, 122, 5, 0, 10, 10, 13, 13, 34, 34, 39, 39, 92, 92, 2, 0, 76, 76, 108,
		108, 1, 0, 49, 57, 2, 0, 88, 88, 120, 120, 3, 0, 48, 57, 65, 70, 97, 102,
		1, 0, 48, 55, 2, 0, 66, 66, 98, 98, 1, 0, 48, 49, 2, 0, 69, 69, 101, 101,
		2, 0, 43, 43, 45, 45, 4, 0, 68, 68, 70, 70, 100, 100, 102, 102, 2, 0, 80,
		80, 112, 112, 396, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0,
		0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0,
		0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0,
		0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1,
		0, 0, 0, 0, 31, 1, 0, 0, 0, 1, 111, 1, 0, 0, 0, 3, 114, 1, 0, 0, 0, 5,
		117, 1, 0, 0, 0, 7, 119, 1, 0, 0, 0, 9, 121, 1, 0, 0, 0, 11, 123, 1, 0,
		0, 0, 13, 125, 1, 0, 0, 0, 15, 127, 1, 0, 0, 0, 17, 129, 1, 0, 0, 0, 19,
		132, 1, 0, 0, 0, 21, 136, 1, 0, 0, 0, 23, 143, 1, 0, 0, 0, 25, 157, 1,
		0, 0, 0, 27, 161, 1, 0, 0, 0, 29, 172, 1, 0, 0, 0, 31, 184, 1, 0, 0, 0,
		33, 187, 1, 0, 0, 0, 35, 191, 1, 0, 0, 0, 37, 193, 1, 0, 0, 0, 39, 197,
		1, 0, 0, 0, 41, 201, 1, 0, 0, 0, 43, 205, 1, 0, 0, 0, 45, 209, 1, 0, 0,
		0, 47, 221, 1, 0, 0, 0, 49, 223, 1, 0, 0, 0, 51, 232, 1, 0, 0, 0, 53, 234,
		1, 0, 0, 0, 55, 237, 1, 0, 0, 0, 57, 243, 1, 0, 0, 0, 59, 246, 1, 0, 0,
		0, 61, 250, 1, 0, 0, 0, 63, 254, 1, 0, 0, 0, 65, 261, 1, 0, 0, 0, 67, 264,
		1, 0, 0, 0, 69, 270, 1, 0, 0, 0, 71, 272, 1, 0, 0, 0, 73, 278, 1, 0, 0,
		0, 75, 285, 1, 0, 0, 0, 77, 288, 1, 0, 0, 0, 79, 294, 1, 0, 0, 0, 81, 296,
		1, 0, 0, 0, 83, 300, 1, 0, 0, 0, 85, 307, 1, 0, 0, 0, 87, 310, 1, 0, 0,
		0, 89, 316, 1, 0, 0, 0, 91, 345, 1, 0, 0, 0, 93, 347, 1, 0, 0, 0, 95, 350,
		1, 0, 0, 0, 97, 353, 1, 0, 0, 0, 99, 357, 1, 0, 0, 0, 101, 359, 1, 0, 0,
		0, 103, 361, 1, 0, 0, 0, 105, 377, 1, 0, 0, 0, 107, 379, 1, 0, 0, 0, 109,
		382, 1, 0, 0, 0, 111, 112, 5, 38, 0, 0, 112, 113, 5, 38, 0, 0, 113, 2,
		1, 0, 0, 0, 114, 115, 5, 124, 0, 0, 115, 116, 5, 124, 0, 0, 116, 4, 1,
		0, 0, 0, 117, 118, 5, 44, 0, 0, 118, 6, 1, 0, 0, 0, 119, 120, 5, 46, 0,
		0, 120, 8, 1, 0, 0, 0, 121, 122, 5, 91, 0, 0, 122, 10, 1, 0, 0, 0, 123,
		124, 5, 93, 0, 0, 124, 12, 1, 0, 0, 0, 125, 126, 5, 40, 0, 0, 126, 14,
		1, 0, 0, 0, 127, 128, 5, 41, 0, 0, 128, 16, 1, 0, 0, 0, 129, 130, 5, 61,
		0, 0, 130, 131, 5, 61, 0, 0, 131, 18, 1, 0, 0, 0, 132, 133, 5, 33, 0, 0,
		133, 134, 5, 61, 0, 0, 134, 20, 1, 0, 0, 0, 135, 137, 7, 0, 0, 0, 136,
		135, 1, 0, 0, 0, 137, 138, 1, 0, 0, 0, 138, 136, 1, 0, 0, 0, 138, 139,
		1, 0, 0, 0, 139, 140, 1, 0, 0, 0, 140, 141, 6, 10, 0, 0, 141, 22, 1, 0,
		0, 0, 142, 144, 7, 1, 0, 0, 143, 142, 1, 0, 0, 0, 144, 145, 1, 0, 0, 0,
		145, 143, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 150, 1, 0, 0, 0, 147,
		149, 7, 2, 0, 0, 148, 147, 1, 0, 0, 0, 149, 152, 1, 0, 0, 0, 150, 148,
		1, 0, 0, 0, 150, 151, 1, 0, 0, 0, 151, 24, 1, 0, 0, 0, 152, 150, 1, 0,
		0, 0, 153, 158, 3, 37, 18, 0, 154, 158, 3, 39, 19, 0, 155, 158, 3, 41,
		20, 0, 156, 158, 3, 43, 21, 0, 157, 153, 1, 0, 0, 0, 157, 154, 1, 0, 0,
		0, 157, 155, 1, 0, 0, 0, 157, 156, 1, 0, 0, 0, 158, 26, 1, 0, 0, 0, 159,
		162, 3, 91, 45, 0, 160, 162, 3, 103, 51, 0, 161, 159, 1, 0, 0, 0, 161,
		160, 1, 0, 0, 0, 162, 28, 1, 0, 0, 0, 163, 164, 5, 116, 0, 0, 164, 165,
		5, 114, 0, 0, 165, 166, 5, 117, 0, 0, 166, 173, 5, 101, 0, 0, 167, 168,
		5, 102, 0, 0, 168, 169, 5, 97, 0, 0, 169, 170, 5, 108, 0, 0, 170, 171,
		5, 115, 0, 0, 171, 173, 5, 101, 0, 0, 172, 163, 1, 0, 0, 0, 172, 167, 1,
		0, 0, 0, 173, 30, 1, 0, 0, 0, 174, 176, 5, 34, 0, 0, 175, 177, 3, 33, 16,
		0, 176, 175, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178,
		185, 5, 34, 0, 0, 179, 181, 5, 39, 0, 0, 180, 182, 3, 33, 16, 0, 181, 180,
		1, 0, 0, 0, 181, 182, 1, 0, 0, 0, 182, 183, 1, 0, 0, 0, 183, 185, 5, 39,
		0, 0, 184, 174, 1, 0, 0, 0, 184, 179, 1, 0, 0, 0, 185, 32, 1, 0, 0, 0,
		186, 188, 3, 35, 17, 0, 187, 186, 1, 0, 0, 0, 188, 189, 1, 0, 0, 0, 189,
		187, 1, 0, 0, 0, 189, 190, 1, 0, 0, 0, 190, 34, 1, 0, 0, 0, 191, 192, 8,
		3, 0, 0, 192, 36, 1, 0, 0, 0, 193, 195, 3, 47, 23, 0, 194, 196, 3, 45,
		22, 0, 195, 194, 1, 0, 0, 0, 195, 196, 1, 0, 0, 0, 196, 38, 1, 0, 0, 0,
		197, 199, 3, 61, 30, 0, 198, 200, 3, 45, 22, 0, 199, 198, 1, 0, 0, 0, 199,
		200, 1, 0, 0, 0, 200, 40, 1, 0, 0, 0, 201, 203, 3, 71, 35, 0, 202, 204,
		3, 45, 22, 0, 203, 202, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 42, 1, 0,
		0, 0, 205, 207, 3, 81, 40, 0, 206, 208, 3, 45, 22, 0, 207, 206, 1, 0, 0,
		0, 207, 208, 1, 0, 0, 0, 208, 44, 1, 0, 0, 0, 209, 210, 7, 4, 0, 0, 210,
		46, 1, 0, 0, 0, 211, 222, 5, 48, 0, 0, 212, 219, 3, 53, 26, 0, 213, 215,
		3, 49, 24, 0, 214, 213, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 220, 1,
		0, 0, 0, 216, 217, 3, 59, 29, 0, 217, 218, 3, 49, 24, 0, 218, 220, 1, 0,
		0, 0, 219, 214, 1, 0, 0, 0, 219, 216, 1, 0, 0, 0, 220, 222, 1, 0, 0, 0,
		221, 211, 1, 0, 0, 0, 221, 212, 1, 0, 0, 0, 222, 48, 1, 0, 0, 0, 223, 228,
		3, 51, 25, 0, 224, 226, 3, 55, 27, 0, 225, 224, 1, 0, 0, 0, 225, 226, 1,
		0, 0, 0, 226, 227, 1, 0, 0, 0, 227, 229, 3, 51, 25, 0, 228, 225, 1, 0,
		0, 0, 228, 229, 1, 0, 0, 0, 229, 50, 1, 0, 0, 0, 230, 233, 5, 48, 0, 0,
		231, 233, 3, 53, 26, 0, 232, 230, 1, 0, 0, 0, 232, 231, 1, 0, 0, 0, 233,
		52, 1, 0, 0, 0, 234, 235, 7, 5, 0, 0, 235, 54, 1, 0, 0, 0, 236, 238, 3,
		57, 28, 0, 237, 236, 1, 0, 0, 0, 238, 239, 1, 0, 0, 0, 239, 237, 1, 0,
		0, 0, 239, 240, 1, 0, 0, 0, 240, 56, 1, 0, 0, 0, 241, 244, 3, 51, 25, 0,
		242, 244, 5, 95, 0, 0, 243, 241, 1, 0, 0, 0, 243, 242, 1, 0, 0, 0, 244,
		58, 1, 0, 0, 0, 245, 247, 5, 95, 0, 0, 246, 245, 1, 0, 0, 0, 247, 248,
		1, 0, 0, 0, 248, 246, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 60, 1, 0,
		0, 0, 250, 251, 5, 48, 0, 0, 251, 252, 7, 6, 0, 0, 252, 253, 3, 63, 31,
		0, 253, 62, 1, 0, 0, 0, 254, 259, 3, 65, 32, 0, 255, 257, 3, 67, 33, 0,
		256, 255, 1, 0, 0, 0, 256, 257, 1, 0, 0, 0, 257, 258, 1, 0, 0, 0, 258,
		260, 3, 65, 32, 0, 259, 256, 1, 0, 0, 0, 259, 260, 1, 0, 0, 0, 260, 64,
		1, 0, 0, 0, 261, 262, 7, 7, 0, 0, 262, 66, 1, 0, 0, 0, 263, 265, 3, 69,
		34, 0, 264, 263, 1, 0, 0, 0, 265, 266, 1, 0, 0, 0, 266, 264, 1, 0, 0, 0,
		266, 267, 1, 0, 0, 0, 267, 68, 1, 0, 0, 0, 268, 271, 3, 65, 32, 0, 269,
		271, 5, 95, 0, 0, 270, 268, 1, 0, 0, 0, 270, 269, 1, 0, 0, 0, 271, 70,
		1, 0, 0, 0, 272, 274, 5, 48, 0, 0, 273, 275, 3, 59, 29, 0, 274, 273, 1,
		0, 0, 0, 274, 275, 1, 0, 0, 0, 275, 276, 1, 0, 0, 0, 276, 277, 3, 73, 36,
		0, 277, 72, 1, 0, 0, 0, 278, 283, 3, 75, 37, 0, 279, 281, 3, 77, 38, 0,
		280, 279, 1, 0, 0, 0, 280, 281, 1, 0, 0, 0, 281, 282, 1, 0, 0, 0, 282,
		284, 3, 75, 37, 0, 283, 280, 1, 0, 0, 0, 283, 284, 1, 0, 0, 0, 284, 74,
		1, 0, 0, 0, 285, 286, 7, 8, 0, 0, 286, 76, 1, 0, 0, 0, 287, 289, 3, 79,
		39, 0, 288, 287, 1, 0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 288, 1, 0, 0, 0,
		290, 291, 1, 0, 0, 0, 291, 78, 1, 0, 0, 0, 292, 295, 3, 75, 37, 0, 293,
		295, 5, 95, 0, 0, 294, 292, 1, 0, 0, 0, 294, 293, 1, 0, 0, 0, 295, 80,
		1, 0, 0, 0, 296, 297, 5, 48, 0, 0, 297, 298, 7, 9, 0, 0, 298, 299, 3, 83,
		41, 0, 299, 82, 1, 0, 0, 0, 300, 305, 3, 85, 42, 0, 301, 303, 3, 87, 43,
		0, 302, 301, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 304, 1, 0, 0, 0, 304,
		306, 3, 85, 42, 0, 305, 302, 1, 0, 0, 0, 305, 306, 1, 0, 0, 0, 306, 84,
		1, 0, 0, 0, 307, 308, 7, 10, 0, 0, 308, 86, 1, 0, 0, 0, 309, 311, 3, 89,
		44, 0, 310, 309, 1, 0, 0, 0, 311, 312, 1, 0, 0, 0, 312, 310, 1, 0, 0, 0,
		312, 313, 1, 0, 0, 0, 313, 88, 1, 0, 0, 0, 314, 317, 3, 85, 42, 0, 315,
		317, 5, 95, 0, 0, 316, 314, 1, 0, 0, 0, 316, 315, 1, 0, 0, 0, 317, 90,
		1, 0, 0, 0, 318, 319, 3, 49, 24, 0, 319, 321, 5, 46, 0, 0, 320, 322, 3,
		49, 24, 0, 321, 320, 1, 0, 0, 0, 321, 322, 1, 0, 0, 0, 322, 324, 1, 0,
		0, 0, 323, 325, 3, 93, 46, 0, 324, 323, 1, 0, 0, 0, 324, 325, 1, 0, 0,
		0, 325, 327, 1, 0, 0, 0, 326, 328, 3, 101, 50, 0, 327, 326, 1, 0, 0, 0,
		327, 328, 1, 0, 0, 0, 328, 346, 1, 0, 0, 0, 329, 330, 5, 46, 0, 0, 330,
		332, 3, 49, 24, 0, 331, 333, 3, 93, 46, 0, 332, 331, 1, 0, 0, 0, 332, 333,
		1, 0, 0, 0, 333, 335, 1, 0, 0, 0, 334, 336, 3, 101, 50, 0, 335, 334, 1,
		0, 0, 0, 335, 336, 1, 0, 0, 0, 336, 346, 1, 0, 0, 0, 337, 338, 3, 49, 24,
		0, 338, 340, 3, 93, 46, 0, 339, 341, 3, 101, 50, 0, 340, 339, 1, 0, 0,
		0, 340, 341, 1, 0, 0, 0, 341, 346, 1, 0, 0, 0, 342, 343, 3, 49, 24, 0,
		343, 344, 3, 101, 50, 0, 344, 346, 1, 0, 0, 0, 345, 318, 1, 0, 0, 0, 345,
		329, 1, 0, 0, 0, 345, 337, 1, 0, 0, 0, 345, 342, 1, 0, 0, 0, 346, 92, 1,
		0, 0, 0, 347, 348, 3, 95, 47, 0, 348, 349, 3, 97, 48, 0, 349, 94, 1, 0,
		0, 0, 350, 351, 7, 11, 0, 0, 351, 96, 1, 0, 0, 0, 352, 354, 3, 99, 49,
		0, 353, 352, 1, 0, 0, 0, 353, 354, 1, 0, 0, 0, 354, 355, 1, 0, 0, 0, 355,
		356, 3, 49, 24, 0, 356, 98, 1, 0, 0, 0, 357, 358, 7, 12, 0, 0, 358, 100,
		1, 0, 0, 0, 359, 360, 7, 13, 0, 0, 360, 102, 1, 0, 0, 0, 361, 362, 3, 105,
		52, 0, 362, 364, 3, 107, 53, 0, 363, 365, 3, 101, 50, 0, 364, 363, 1, 0,
		0, 0, 364, 365, 1, 0, 0, 0, 365, 104, 1, 0, 0, 0, 366, 368, 3, 61, 30,
		0, 367, 369, 5, 46, 0, 0, 368, 367, 1, 0, 0, 0, 368, 369, 1, 0, 0, 0, 369,
		378, 1, 0, 0, 0, 370, 371, 5, 48, 0, 0, 371, 373, 7, 6, 0, 0, 372, 374,
		3, 63, 31, 0, 373, 372, 1, 0, 0, 0, 373, 374, 1, 0, 0, 0, 374, 375, 1,
		0, 0, 0, 375, 376, 5, 46, 0, 0, 376, 378, 3, 63, 31, 0, 377, 366, 1, 0,
		0, 0, 377, 370, 1, 0, 0, 0, 378, 106, 1, 0, 0, 0, 379, 380, 3, 109, 54,
		0, 380, 381, 3, 97, 48, 0, 381, 108, 1, 0, 0, 0, 382, 383, 7, 14, 0, 0,
		383, 110, 1, 0, 0, 0, 49, 0, 138, 145, 150, 157, 161, 172, 176, 181, 184,
		189, 195, 199, 203, 207, 214, 219, 221, 225, 228, 232, 239, 243, 248, 256,
		259, 266, 270, 274, 280, 283, 290, 294, 302, 305, 312, 316, 321, 324, 327,
		332, 335, 340, 345, 353, 364, 368, 373, 377, 1, 0, 1, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ExpressionLexerInit initializes any static state used to implement ExpressionLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewExpressionLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ExpressionLexerInit() {
	staticData := &expressionlexerLexerStaticData
	staticData.once.Do(expressionlexerLexerInit)
}

// NewExpressionLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewExpressionLexer(input antlr.CharStream) *ExpressionLexer {
	ExpressionLexerInit()
	l := new(ExpressionLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &expressionlexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "Expression.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ExpressionLexer tokens.
const (
	ExpressionLexerT__0                 = 1
	ExpressionLexerT__1                 = 2
	ExpressionLexerT__2                 = 3
	ExpressionLexerDOT                  = 4
	ExpressionLexerLBRACK               = 5
	ExpressionLexerRBRACK               = 6
	ExpressionLexerLPAREN               = 7
	ExpressionLexerRPAREN               = 8
	ExpressionLexerEQUAL                = 9
	ExpressionLexerNOTEQUAL             = 10
	ExpressionLexerWhiteSpaces          = 11
	ExpressionLexerIdentifier           = 12
	ExpressionLexerIntegerLiteral       = 13
	ExpressionLexerFloatingPointLiteral = 14
	ExpressionLexerBooleanLiteral       = 15
	ExpressionLexerStringLiteral        = 16
)
